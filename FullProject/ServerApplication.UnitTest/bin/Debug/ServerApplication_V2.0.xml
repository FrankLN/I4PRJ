<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServerApplication_V2.0</name>
    </assembly>
    <members>
        <member name="T:ServerApplication.Program">
            <summary>
            <c>Program</c> is the startup class, which starts up the serverApp.
            </summary>
        </member>
        <member name="T:ServerApplication.Server">
            <summary>
            <c>Server</c> is the class, which is responsible for the tcp connection to the <c>Client</c>.
            For every <c>Client</c> connected, a <c>Sever</c> instance is created.
            This way makes sure that the <c>NetworkStream</c> stays unique.
            </summary>
        </member>
        <member name="F:ServerApplication.Server._serverSocket">
            <summary>
            Memberdata:
            <c>TcpListener</c> is the server socket.
            <c>TcpClient</c> is the client socket, the <c>Server</c> is connected to.
            <c>NetworkStream</c> is the stream, the <c>Server</c> is communicating with the <c>Client</c> through.
            <c>BinaryFormatter</c> is used for Serializing.
            maxPacketSize is the max size the server will send at a time.
            </summary>
        </member>
        <member name="M:ServerApplication.Server.#ctor(System.Net.Sockets.TcpListener,System.Net.Sockets.TcpClient)">
            <summary>
            The <c>Server</c>'s constructor. The constructor calls the methode <c>Init</c>
            </summary>
            <param name="serverSocket"></param>
            <param name="clientSocket"></param>
        </member>
        <member name="M:ServerApplication.Server.Init(System.Net.Sockets.TcpListener,System.Net.Sockets.TcpClient)">
            <summary>
            <c>Init</c> is the methode that initilize the <c>Server</c>'s memberdata.
            </summary>
            <param name="serverSocket"></param>
            <param name="clientSocket"></param>
        </member>
        <member name="M:ServerApplication.Server.RecieveMessage">
            <summary>
            The <c>RecieveMessage</c> methode, recieves a message from the connected client,
            Deserialize it,
            then cast the return value to the interface <c>IMessage</c>
            and at last returns the message to where the methode where called, <c>ServerApp</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerApplication.Server.SendToClient(System.Runtime.Serialization.ISerializable)">
            <summary>
            The <c>SendToClient</c> methode sends a reply to the client.
            The message is serialized and sent with the BinaryFormatter.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ServerApplication.Server.RecieveFile(System.String,System.Int64)">
            <summary>
            The <c>RecieveFile</c> methode recieves a file from the connected client,
            and saves it in a directory on the server.
            A directory for every job is created named after the jobId,
            the file is named after the jobName and placed in the job's directory.
            </summary>
            <param name="fileName"></param>
            fileName should be in this format: C:\\Jobs\\"JobId"\\"JobFileName"
            <param name="fileSize"></param>
        </member>
        <member name="M:ServerApplication.Server.SendFile(System.String,System.Int64)">
            <summary>
            The methode <c>SendFile</c> sends files to the connected client.
            </summary>
            <param name="fileName"></param>
            fileName should be in this format: C:\\Jobs\\"JobId"\\"JobFileName"
            <param name="fileSize"></param>
        </member>
        <member name="T:ServerApplication.ServerApp">
            <summary>
            ServerApp is the system controller on the server. 
            Its primary task is to handle and reply incomming messages.
            </summary>
        </member>
        <member name="M:ServerApplication.ServerApp.GenerateActivationCode">
            <summary>
            <c>GenerateActivationCode</c> is a methode that generate a random 8 numbers or letters long code.
            </summary>
            <returns>A string with 8 numbers and letters</returns>
        </member>
        <member name="M:ServerApplication.ServerApp.SendEmail(System.String,System.String,System.String)">
            <summary>
            <c>SendEmail</c> is a methode that sends an email.
            </summary>
            <param name="email"></param>
            The reciever email.
            <param name="subject"></param>
            The subject to the email.
            <param name="text"></param>
            The text of the email.
        </member>
        <member name="M:ServerApplication.ServerApp.#ctor(System.Int32,DatabaseInterface.IDatabase)">
            <summary>
            The <c>ServerApp</c> constructor.
            </summary>
            <param name="port"></param>
            The port which the ServerApp should listen to.
            <param name="database"></param>
            The database interface the ServerApp use to handle data.
        </member>
        <member name="M:ServerApplication.ServerApp.RunServerApp">
            <summary>
            <c>RunServerApp</c> is the methode where <c>Client</c>'s get connected to the server.
            After connection the handling of the recieved message gets proceeded in a thread,
            to allow more <c>Client</c> requests.
            </summary>
        </member>
        <member name="M:ServerApplication.ServerApp.ReciveMessage(System.Object)">
            <summary>
            <c>RecieveMessage</c> is the methode for handling messages.
            A new instance of <c>Server</c> is created
            </summary>
            <param name="stateInfo"></param>
            Contains a TcpListener and a TcpClient
        </member>
        <member name="M:ServerApplication.ServerApp.VerifyLogin(MessageTypes.Messages.ILoginMsg,MessageTypes.IServer)">
            <summary>
            <c>VerifyLogin</c> is the methode for handling login requests.
            </summary>
            <param name="loginMsg"></param>
            The message recieved from the <c>Client</c>.
            <param name="server"></param>
            The <c>Server</c> instance to reply with.
        </member>
        <member name="M:ServerApplication.ServerApp.CreateUser(MessageTypes.Messages.ICreateUserMsg,MessageTypes.IServer)">
            <summary>
            <c>CreateUser</c> is the methode for handling new user requests.
            </summary>
            <param name="createUserMsg"></param>
            The message recieved from the <c>Client</c>
            <param name="server"></param>
            The <c>Server</c> instance to reply with.
        </member>
        <member name="M:ServerApplication.ServerApp.CreateJob(MessageTypes.Messages.ICreateJobMsg,MessageTypes.IServer)">
            <summary>
            <c>CreateJob</c> is the methode for handling new job requests.
            </summary>
            <param name="createJobMsg"></param>
            The message recieved from the <c>Client</c>
            <param name="server"></param>
            The <c>Server</c> instance to reply with.
        </member>
        <member name="M:ServerApplication.ServerApp.RequestJobs(MessageTypes.Messages.IRequestJobsMsg,MessageTypes.IServer)">
            <summary>
            <c>RequestJobs</c> is the methode for handling list of jobs requests.
            </summary>
            <param name="requestJobsMsg"></param>
            The message recieved from the <c>Client</c>
            <param name="server"></param>
            The <c>Server</c> instance to reply with.
        </member>
        <member name="M:ServerApplication.ServerApp.DownloadJob(MessageTypes.Messages.IDownloadJobMsg,MessageTypes.IServer)">
            <summary>
            <c>DownloadJob</c> is the methode for handling download job requests.
            </summary>
            <param name="downloadJobMsg"></param>
            The message recieved from the <c>Client</c>
            <param name="server"></param>
            The <c>Server</c> instance to reply with.
        </member>
        <member name="M:ServerApplication.ServerApp.GetMaterials(MessageTypes.Messages.IGetMaterialsMsg,MessageTypes.IServer)">
            <summary>
            <c>GetMaterials</c> is the methode for handling list of material requests.
            </summary>
            <param name="getMaterialsMsg"></param>
            The message recieved from the <c>Client</c>
            <param name="server"></param>
            The <c>Server</c> instance to reply with.
        </member>
        <member name="M:ServerApplication.ServerApp.ActivationCodeRequest(MessageTypes.Messages.IActivationCodeRequestMsg,MessageTypes.IServer)">
            <summary>
            <c>ActivationCodeRequest</c> is the methode for handling new activation code request.
            </summary>
            <param name="activationCodeRequestMsg"></param>
            The message recieved from the <c>Client</c>
            <param name="server"></param>
            The <c>Server</c> instance to reply with.
        </member>
        <member name="M:ServerApplication.ServerApp.ActivateUser(MessageTypes.Messages.IActivationMsg,MessageTypes.IServer)">
            <summary>
            <c>ActivateUser</c> is the methode for handling user activation request.
            </summary>
            <param name="activationMsg"></param>
            The message recieved from the <c>Client</c>
            <param name="server"></param>
            The <c>Server</c> instance to reply with.
        </member>
    </members>
</doc>
